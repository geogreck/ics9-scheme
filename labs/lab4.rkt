#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 58 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1           0 1299 0 25 29 1 #"\n"
0 0 17 3 12 #";;;;;;Task 1"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"point"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 6 #"cal/cc"
0 0 25 3 1 #" "
0 0 14 3 30 #"call-with-current-continuation"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"use-assertions"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 30 #"call-with-current-continuation"
0 0 25 29 1 #"\n"
0 0 25 3 24 #"                       ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 2 #"cc"
0 0 25 3 3 #") ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 5 #"point"
0 0 25 3 1 #" "
0 0 14 3 2 #"cc"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 6 #"cal/cc"
0 0 25 3 1 #" "
0 0 14 3 30 #"call-with-current-continuation"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 25 3 1 #" "
0 0 14 3 6 #"assert"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 12 #"syntax-rules"
0 0 25 3 3 #" ()"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 6 #"assert"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 24 #"                       ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"FAILED: \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 5 #"write"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"expr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 7 #"newline"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 5 #"point"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 14 #"use-assertions"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 3 #"1/x"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"assert"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 4 #"))) "
0 0 17 3 55
(4
 #"; \xD0\xA3\xD1\x82\xD0\xB2\xD0\xB5\xD1\x80\xD0\xB6\xD0\xB4\xD0\xB5"
 #"\xD0\xBD\xD0\xB8\xD0\xB5: x \xD0\x94\xD0\x9E\xD0\x9B\xD0\x96\xD0\x95"
 #"\xD0\x9D \xD0\x91\xD0\xAB\xD0\xA2\xD0\xAC \xE2\x89\xA0 0"
) 0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 1 #"/"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 3 #"map"
0 0 17 3 1 #" "
0 0 17 3 3 #"1/x"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 3 #"5))"
0 0 25 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 3 #"map"
0 0 17 3 1 #" "
0 0 17 3 3 #"1/x"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 2 #"-2"
0 0 17 3 1 #" "
0 0 17 3 2 #"-1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 3 #"2))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 10 #";;;; Task2"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"save-data"
0 0 25 3 1 #" "
0 0 14 3 4 #"data"
0 0 25 3 1 #" "
0 0 14 3 8 #"filename"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 19 #"with-output-to-file"
0 0 25 3 1 #" "
0 0 14 3 8 #"filename"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 5 #" () ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 46 #"                                             ("
0 0 14 3 5 #"write"
0 0 25 3 1 #" "
0 0 14 3 4 #"data"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 46 #"                                             ("
0 0 14 3 7 #"newline"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"load-data"
0 0 25 3 1 #" "
0 0 14 3 8 #"filename"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 20 #"with-input-from-file"
0 0 25 3 1 #" "
0 0 14 3 8 #"filename"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 5 #" () ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 47 #"                                              ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 1 #"s"
0 0 25 3 2 #" ("
0 0 14 3 4 #"read"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 48 #"                                                "
0 0 14 3 1 #"s"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"count-lines"
0 0 25 3 1 #" "
0 0 14 3 8 #"filename"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 20 #"with-input-from-file"
0 0 25 3 1 #" "
0 0 14 3 8 #"filename"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" ()"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                   ("
0 0 15 3 3 #"let"
0 0 25 3 1 #" "
0 0 14 3 4 #"loop"
0 0 25 3 3 #" (("
0 0 14 3 6 #"prev_s"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #") ("
0 0 14 3 11 #"lines-count"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 38 #"                                     ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 1 #"s"
0 0 25 3 2 #" ("
0 0 14 3 9 #"read-char"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 40 #"                                       ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 11 #"eof-object?"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 2 #") "
0 0 14 3 11 #"lines-count"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 47 #"                                             (("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 6 #"prev_s"
0 0 25 3 1 #" "
0 0 22 3 9 #"#\\newline"
0 0 25 3 4 #")) ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 22 3 9 #"#\\newline"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"loop"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 14 3 11 #"lines-count"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 46 #"                                             ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 4 #"loop"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 11 #"lines-count"
0 0 25 3 8 #"))))))))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 25 29 1 #"\n"
0 0 25 3 46 #"                                              "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 15 #";(define x 100)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 11 #";;;; Task 3"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"trib1"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        (("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 5 #"trib1"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"trib1"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"trib1"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"trib"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 4 #"memo"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-vector"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"empty"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 25 3 1 #" "
0 0 14 3 4 #"loop"
0 0 25 3 3 #" (("
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"            (("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 4 #"memo"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #")) "
0 0 22 3 1 #"'"
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 11 #"vector-set!"
0 0 25 3 1 #" "
0 0 14 3 4 #"memo"
0 0 25 3 3 #"  ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 4 #"loop"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 53 #"                                                    ("
0 0 14 3 4 #"loop"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 53 #"                                                    ("
0 0 14 3 4 #"loop"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 4 #"memo"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 7 #")))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 20 #";(display (trib 40))"
0 0 25 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";(display (trib1 40))"
0 0 25 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 11 #";;;; Task 4"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 25 3 1 #" "
0 0 14 3 5 #"my-if"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 12 #"syntax-rules"
0 0 25 3 3 #" ()"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 5 #"my-if"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 8 #"t-branch"
0 0 25 3 1 #" "
0 0 14 3 8 #"f-branch"
0 0 25 3 3 #") ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 6 #"t-prom"
0 0 25 3 2 #" ("
0 0 15 3 5 #"delay"
0 0 25 3 1 #" "
0 0 14 3 8 #"t-branch"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 43 #"                                          ("
0 0 14 3 6 #"f-prom"
0 0 25 3 2 #" ("
0 0 15 3 5 #"delay"
0 0 25 3 1 #" "
0 0 14 3 8 #"f-branch"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 39 #"                                      ("
0 0 14 3 5 #"force"
0 0 25 3 2 #" ("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 6 #"t-prom"
0 0 25 3 2 #") "
0 0 14 3 6 #"f-prom"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";(my-if #t 1 (/ 1 0))"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";(my-if #f (/ 1 0) 1)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 11 #";;;; Task 5"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 25 3 1 #" "
0 0 14 3 6 #"my-let"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 12 #"syntax-rules"
0 0 25 3 3 #" ()"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 6 #"my-let"
0 0 25 3 3 #" (("
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 3 #")) "
0 0 14 3 4 #"body"
0 0 25 3 4 #") (("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"var"
0 0 25 3 2 #") "
0 0 14 3 4 #"body"
0 0 25 3 2 #") "
0 0 14 3 3 #"val"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 6 #"my-let"
0 0 25 3 3 #" (("
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 2 #") "
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 2 #") "
0 0 14 3 4 #"body"
0 0 25 3 3 #") ("
0 0 14 3 6 #"my-let"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 3 #" (("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"var"
0 0 25 3 2 #") "
0 0 14 3 4 #"body"
0 0 25 3 2 #") "
0 0 14 3 3 #"val"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 25 3 1 #" "
0 0 14 3 7 #"my-let*"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 12 #"syntax-rules"
0 0 25 3 3 #" ()"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 7 #"my-let*"
0 0 25 3 3 #" (("
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 3 #")) "
0 0 14 3 4 #"body"
0 0 25 3 4 #") (("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"var"
0 0 25 3 2 #") "
0 0 14 3 4 #"body"
0 0 25 3 2 #") "
0 0 14 3 3 #"val"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 7 #"my-let*"
0 0 25 3 3 #" (("
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 2 #") "
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 2 #") "
0 0 14 3 4 #"body"
0 0 25 3 3 #") ("
0 0 14 3 6 #"my-let"
0 0 25 3 3 #" (("
0 0 14 3 3 #"var"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 46 #"                                             ("
0 0 14 3 7 #"my-let*"
0 0 25 3 2 #" ("
0 0 14 3 2 #"xs"
0 0 25 3 2 #") "
0 0 14 3 4 #"body"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 22 #";(my-let ((x 2) (y 3))"
0 0 25 29 1 #"\n"
0 0 17 3 11 #";  (* x y))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 11 #";;;; Task 6"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 25 3 1 #" "
0 0 15 3 4 #"when"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 12 #"syntax-rules"
0 0 25 3 3 #" ()"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 15 3 4 #"when"
0 0 25 3 1 #" "
0 0 14 3 5 #"cond?"
0 0 25 3 1 #" "
0 0 14 3 10 #"one-action"
0 0 25 3 3 #") ("
0 0 14 3 3 #"and"
0 0 25 3 1 #" "
0 0 14 3 5 #"cond?"
0 0 25 3 1 #" "
0 0 14 3 10 #"one-action"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 15 3 4 #"when"
0 0 25 3 1 #" "
0 0 14 3 5 #"cond?"
0 0 25 3 1 #" "
0 0 14 3 10 #"one-action"
0 0 25 3 1 #" "
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 14 3 7 #"actions"
0 0 25 3 3 #") ("
0 0 14 3 3 #"and"
0 0 25 3 1 #" "
0 0 14 3 5 #"cond?"
0 0 25 3 2 #" ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 10 #"one-action"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 53 #"                                                    ("
0 0 15 3 4 #"when"
0 0 25 3 1 #" "
0 0 14 3 5 #"cond?"
0 0 25 3 1 #" "
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 14 3 7 #"actions"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 45 #";(when   (> x 0) (display \"x > 0\") (newline))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 25 3 1 #" "
0 0 15 3 6 #"unless"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 12 #"syntax-rules"
0 0 25 3 3 #" ()"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 15 3 6 #"unless"
0 0 25 3 1 #" "
0 0 14 3 5 #"cond?"
0 0 25 3 1 #" "
0 0 14 3 10 #"one-action"
0 0 25 3 3 #") ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 14 3 5 #"cond?"
0 0 25 3 2 #") "
0 0 14 3 10 #"one-action"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 15 3 6 #"unless"
0 0 25 3 1 #" "
0 0 14 3 5 #"cond?"
0 0 25 3 1 #" "
0 0 14 3 10 #"one-action"
0 0 25 3 1 #" "
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 14 3 7 #"actions"
0 0 25 3 3 #") ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 14 3 5 #"cond?"
0 0 25 3 3 #") ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 10 #"one-action"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 61
#"                                                            ("
0 0 15 3 6 #"unless"
0 0 25 3 1 #" "
0 0 14 3 5 #"cond?"
0 0 25 3 1 #" "
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 14 3 7 #"actions"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 46 #";(unless (= x 0) (display \"x != 0\") (newline))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 4 #";for"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 25 3 1 #" "
0 0 15 3 3 #"for"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 12 #"syntax-rules"
0 0 25 3 2 #" ("
0 0 14 3 2 #"in"
0 0 25 3 1 #" "
0 0 14 3 2 #"as"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 15 3 3 #"for"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 2 #"in"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 1 #" "
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 14 3 7 #"actions"
0 0 25 3 3 #") ("
0 0 15 3 3 #"let"
0 0 25 3 1 #" "
0 0 14 3 4 #"loop"
0 0 25 3 3 #" (("
0 0 14 3 1 #"n"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #") ("
0 0 14 3 3 #"xs1"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 3 #"xs1"
0 0 25 3 4 #")) ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 1 #"x"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"xs1"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 56 #"                                                       ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 60
#"                                                           ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 62
#"                                                             ("
0 0 15 3 5 #"begin"
0 0 25 3 1 #" "
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 14 3 7 #"actions"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 62
#"                                                             ("
0 0 14 3 4 #"loop"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 3 #"xs1"
0 0 25 3 8 #"))))))))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 15 3 3 #"for"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 1 #" "
0 0 14 3 2 #"as"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 14 3 7 #"actions"
0 0 25 3 3 #") ("
0 0 15 3 3 #"let"
0 0 25 3 1 #" "
0 0 14 3 4 #"loop"
0 0 25 3 3 #" (("
0 0 14 3 1 #"n"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #") ("
0 0 14 3 3 #"xs1"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 3 #"xs1"
0 0 25 3 4 #")) ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 1 #"x"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"xs1"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 56 #"                                                       ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 60
#"                                                           ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 62
#"                                                             ("
0 0 15 3 5 #"begin"
0 0 25 3 1 #" "
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 14 3 7 #"actions"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 62
#"                                                             ("
0 0 14 3 4 #"loop"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 3 #"xs1"
0 0 25 3 10 #"))))))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 19 #";(for i in '(1 2 3)"
0 0 25 29 1 #"\n"
0 0 17 3 20 #"; (for j in '(4 5 6)"
0 0 25 29 1 #"\n"
0 0 17 3 22 #"; (display (list i j))"
0 0 25 29 1 #"\n"
0 0 17 3 12 #";(newline)))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 19 #";(for '(1 2 3) as i"
0 0 25 29 1 #"\n"
0 0 17 3 20 #"; (for '(4 5 6) as j"
0 0 25 29 1 #"\n"
0 0 17 3 23 #";  (display (list i j))"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; (newline)))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 6 #";while"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 25 3 1 #" "
0 0 14 3 5 #"while"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 12 #"syntax-rules"
0 0 25 3 3 #" ()"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 5 #"while"
0 0 25 3 1 #" "
0 0 14 3 5 #"cond?"
0 0 25 3 1 #" "
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 14 3 7 #"actions"
0 0 25 3 3 #") ("
0 0 15 3 6 #"letrec"
0 0 25 3 3 #" (("
0 0 14 3 4 #"loop"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" ()"
0 0 25 29 1 #"\n"
0 0 25 3 47 #"                                              ("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 5 #"cond?"
0 0 25 29 1 #"\n"
0 0 25 3 51 #"                                                  ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 53 #"                                                    ("
0 0 15 3 5 #"begin"
0 0 25 3 1 #" "
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 14 3 7 #"actions"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 53 #"                                                    ("
0 0 14 3 4 #"loop"
0 0 25 3 8 #")))))) ("
0 0 14 3 4 #"loop"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #";(let ((p 0)"
0 0 25 29 1 #"\n"
0 0 17 3 12 #";     (q 0))"
0 0 25 29 1 #"\n"
0 0 17 3 15 #";(while (< p 3)"
0 0 25 29 1 #"\n"
0 0 17 3 17 #";      (set! q 0)"
0 0 25 29 1 #"\n"
0 0 17 3 20 #";     (while (< q 3)"
0 0 25 29 1 #"\n"
0 0 17 3 31 #";          (display (list p q))"
0 0 25 29 1 #"\n"
0 0 17 3 20 #";          (newline)"
0 0 25 29 1 #"\n"
0 0 17 3 27 #";         (set! q (+ q 1)))"
0 0 25 29 1 #"\n"
0 0 17 3 20 #"; (set! p (+ p 1))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 17 #";repeat.....until"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 25 3 1 #" "
0 0 14 3 6 #"repeat"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 12 #"syntax-rules"
0 0 25 3 2 #" ("
0 0 14 3 5 #"until"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 6 #"repeat"
0 0 25 3 1 #" "
0 0 14 3 7 #"actions"
0 0 25 3 1 #" "
0 0 14 3 5 #"until"
0 0 25 3 1 #" "
0 0 14 3 5 #"cond?"
0 0 25 3 3 #") ("
0 0 15 3 6 #"letrec"
0 0 25 3 3 #" (("
0 0 14 3 4 #"loop"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" ()"
0 0 25 29 1 #"\n"
0 0 25 3 52 #"                                                   ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 54 #"                                                     ("
0 0 15 3 5 #"begin"
0 0 25 3 1 #" "
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 14 3 7 #"actions"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 54 #"                                                     ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 14 3 5 #"cond?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 58
#"                                                         ("
0 0 14 3 4 #"loop"
0 0 25 3 8 #")))))) ("
0 0 14 3 4 #"loop"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 12 #";(let ((i 0)"
0 0 25 29 1 #"\n"
0 0 17 3 12 #";     (j 0))"
0 0 25 29 1 #"\n"
0 0 17 3 20 #";(repeat ((set! j 0)"
0 0 25 29 1 #"\n"
0 0 17 3 38 #";        (repeat ((display (list i j))"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";                (set! j (+ j 1)))"
0 0 25 29 1 #"\n"
0 0 17 3 29 #";              until (= j 3))"
0 0 25 29 1 #"\n"
0 0 17 3 22 #";     (set! i (+ i 1))"
0 0 25 29 1 #"\n"
0 0 17 3 15 #";    (newline))"
0 0 25 29 1 #"\n"
0 0 17 3 18 #";  until (= i 3)))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 5 #";cout"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 25 3 1 #" "
0 0 14 3 4 #"cout"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 12 #"syntax-rules"
0 0 25 3 3 #" ()"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 4 #"cout"
0 0 25 3 1 #" "
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 25 3 3 #") ("
0 0 15 3 3 #"let"
0 0 25 3 1 #" "
0 0 14 3 4 #"loop"
0 0 25 3 3 #" (("
0 0 14 3 2 #"xs"
0 0 25 3 1 #" "
0 0 22 3 1 #"`"
0 0 14 3 5 #"exprs"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 3 #") ("
0 0 14 3 6 #"values"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 30 #"                            (("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 2 #"<<"
0 0 25 3 3 #") ("
0 0 14 3 4 #"loop"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 30 #"                            (("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 4 #"endl"
0 0 25 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 56 #"                                                       ("
0 0 14 3 7 #"newline"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 56 #"                                                       ("
0 0 14 3 4 #"loop"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 37 #"                                    ("
0 0 14 3 7 #"display"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 37 #"                                    ("
0 0 14 3 4 #"loop"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 9 #")))))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 100
(5
 #";(cout << \"a = \" << 1 << endl << \"b = \" << 2 << endl)            "
 #"                                   "
) 0 0 25 29 1 #"\n"
0           0
